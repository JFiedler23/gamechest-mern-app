[{"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\index.js":"1","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\App.js":"2","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\context\\MainContextProvider.js":"3","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\store.js":"4","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\actions\\authActions.js":"5","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\utils\\setAuthToken.js":"6","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\context\\MainContext.js":"7","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\auth\\Login.js":"8","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\layout\\Landing.js":"9","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\auth\\Register.js":"10","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\private-route\\PrivateRoute.js":"11","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\dashboard\\Dashboard.js":"12","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\actions\\types.js":"13","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\dashboard\\Card.js":"14","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\layout\\Navbar.js":"15","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\reducers\\index.js":"16","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\add-modal\\AddModal.js":"17","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\reducers\\authReducer.js":"18","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\reducers\\errorReducer.js":"19","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\add-modal\\Form.js":"20","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\sort_filter\\SortMenu.js":"21"},{"size":353,"mtime":1613942213255,"results":"22","hashOfConfig":"23"},{"size":1637,"mtime":1611437731239,"results":"24","hashOfConfig":"23"},{"size":626,"mtime":1613942213254,"results":"25","hashOfConfig":"23"},{"size":313,"mtime":1611012227448,"results":"26","hashOfConfig":"23"},{"size":1811,"mtime":1614272229330,"results":"27","hashOfConfig":"23"},{"size":362,"mtime":1611011872070,"results":"28","hashOfConfig":"23"},{"size":244,"mtime":1613942213254,"results":"29","hashOfConfig":"23"},{"size":4911,"mtime":1613936399340,"results":"30","hashOfConfig":"23"},{"size":1540,"mtime":1611423067010,"results":"31","hashOfConfig":"23"},{"size":6254,"mtime":1613936404125,"results":"32","hashOfConfig":"23"},{"size":613,"mtime":1611100314593,"results":"33","hashOfConfig":"23"},{"size":7617,"mtime":1614291687119,"results":"34","hashOfConfig":"23"},{"size":137,"mtime":1611011488620,"results":"35","hashOfConfig":"23"},{"size":1101,"mtime":1614290949450,"results":"36","hashOfConfig":"23"},{"size":1767,"mtime":1614289783608,"results":"37","hashOfConfig":"23"},{"size":213,"mtime":1611011745242,"results":"38","hashOfConfig":"23"},{"size":937,"mtime":1614025312435,"results":"39","hashOfConfig":"23"},{"size":650,"mtime":1611012337677,"results":"40","hashOfConfig":"23"},{"size":299,"mtime":1611012363800,"results":"41","hashOfConfig":"23"},{"size":1382,"mtime":1612198380639,"results":"42","hashOfConfig":"23"},{"size":879,"mtime":1614290714327,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1pgruf5",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"46"},"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\index.js",[],["94","95"],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\App.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\context\\MainContextProvider.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\store.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\actions\\authActions.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\utils\\setAuthToken.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\context\\MainContext.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\auth\\Login.js",["96","97"],"import React, { useEffect, useState, } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nfunction Login(props){\r\n    const [user, setUser] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        errors: {}\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (props.auth.isAuthenticated) {\r\n            props.history.push(\"/dashboard\"); // push user to dashboard when they login\r\n        }\r\n  \r\n        if (props.errors) {\r\n            setUser({...user, errors: props.errors});\r\n        }\r\n\r\n    }, [props.auth.isAuthenticated, props.errors]);\r\n\r\n    useEffect(() => {\r\n        if (props.auth.isAuthenticated) {\r\n            props.history.push(\"/dashboard\");\r\n        }\r\n    }, [props.auth.isAuthenticated]);\r\n\r\n    const onChange = e => {\r\n        setUser({...user, [e.target.id]: e.target.value });\r\n    };\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        const userData = {\r\n          email: user.email,\r\n          password: user.password\r\n        };\r\n\r\n        props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n    };\r\n\r\n    const { errors } = user;\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div style={{ marginTop: \"4rem\" }} className=\"row\">\r\n                <div className=\"col s8 offset-s2\">\r\n                    <Link to=\"/\" className=\"btn-flat waves-effect\">\r\n                        <i className=\"material-icons left\">keyboard_backspace</i> Back to\r\n                        home\r\n                    </Link>\r\n                    <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                        <h4>\r\n                            <b>Login</b> below\r\n                        </h4>\r\n                        <p className=\"grey-text text-darken-1\">\r\n                            Don't have an account? <Link to=\"/register\">Register</Link>\r\n                        </p>\r\n                    </div>\r\n                    <form noValidate onSubmit={onSubmit}>\r\n                        <div className=\"input-field col s12\">\r\n                            <input\r\n                                onChange={onChange}\r\n                                value={user.email}\r\n                                error={errors.email}\r\n                                id=\"email\"\r\n                                type=\"email\"\r\n                                className={classnames(\"\", {\r\n                                    invalid: errors.email || errors.emailnotfound\r\n                                })}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <span className=\"red-text\">{errors.email}{errors.emailnotfound}</span>\r\n                        </div>\r\n                        <div className=\"input-field col s12\">\r\n                            <input\r\n                                onChange={onChange}\r\n                                value={user.password}\r\n                                error={errors.password}\r\n                                id=\"password\"\r\n                                type=\"password\"\r\n                                className={classnames(\"\", {\r\n                                    invalid: errors.password || errors.passwordincorrect\r\n                                })}\r\n                            />\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <span className=\"red-text\">{errors.password}{errors.passwordincorrect}</span>\r\n                        </div>\r\n                        <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                            <button\r\n                                style={{\r\n                                    width: \"150px\",\r\n                                    borderRadius: \"3px\",\r\n                                    letterSpacing: \"1.5px\",\r\n                                    marginTop: \"1rem\"\r\n                                }}\r\n                                type=\"submit\"\r\n                                className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                                >\r\n                                Login\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nLogin.propTypes = {\r\n    loginUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n  \r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { loginUser }\r\n)(Login);","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\layout\\Landing.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\auth\\Register.js",["98","99"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nfunction Register(props) {\r\n    const [user, setUser] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        password2: \"\",\r\n        errors: {}\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (props.errors) {\r\n            setUser({...user, errors: props.errors});\r\n        }\r\n    }, [props.errors]);\r\n\r\n    useEffect(() => {\r\n        if (props.auth.isAuthenticated) {\r\n            props.history.push(\"/dashboard\");\r\n        }\r\n    }, [props.auth.isAuthenticated]);\r\n\r\n    const onChange = e =>{\r\n        setUser({...user, [e.target.id]: e.target.value });\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        //preventing the page from reloading on submit\r\n        e.preventDefault();\r\n\r\n        //creating the new user\r\n        const newUser = {\r\n          name: user.name,\r\n          email: user.email,\r\n          password: user.password,\r\n          password2: user.password2\r\n        };\r\n\r\n        props.registerUser(newUser, props.history); \r\n    };\r\n\r\n    const { errors } = user;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s8 offset-s2\">\r\n                    <Link to=\"/\" className=\"btn-flat waves-effect\">\r\n                        <i className=\"material-icons left\">keyboard_backspace</i> Back to\r\n                        home\r\n                    </Link>\r\n                    <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                        <h4>\r\n                            <b>Register</b> below\r\n                        </h4>\r\n                        <p className=\"grey-text text-darken-1\">\r\n                            Already have an account? <Link to=\"/login\">Log in</Link>\r\n                        </p>\r\n                        <h5 className=\"grey-text text-darken-1\">\r\n                            Disclaimer: This application is a work in progress and is being used as a learning experience.\r\n                        </h5>\r\n                    </div>\r\n                    <form noValidate onSubmit={onSubmit}>\r\n                        <div className=\"input-field col s12\">\r\n                            <input\r\n                            onChange={onChange}\r\n                            value={user.name}\r\n                            error={errors.name}\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            className={classnames(\"\", {\r\n                                invalid: errors.name\r\n                              })}\r\n                            />\r\n                            <label htmlFor=\"name\">Name</label>\r\n                        </div>\r\n                        <div className=\"input-field col s12\">\r\n                            <input\r\n                            onChange={onChange}\r\n                            value={user.email}\r\n                            error={errors.email}\r\n                            id=\"email\"\r\n                            type=\"email\"\r\n                            className={classnames(\"\", {\r\n                                invalid: errors.email\r\n                              })}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <span className=\"red-text\">{errors.email}</span>\r\n                        </div>\r\n                        <div className=\"input-field col s12\">\r\n                            <input\r\n                            onChange={onChange}\r\n                            value={user.password}\r\n                            error={errors.password}\r\n                            id=\"password\"\r\n                            type=\"password\"\r\n                            className={classnames(\"\", {\r\n                                invalid: errors.password\r\n                              })}\r\n                            />\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <span className=\"red-text\">{errors.password}</span>\r\n                        </div>\r\n                        <div className=\"input-field col s12\">\r\n                            <input\r\n                                onChange={onChange}\r\n                                value={user.password2}\r\n                                error={errors.password2}\r\n                                id=\"password2\"\r\n                                type=\"password\"\r\n                                className={classnames(\"\", {\r\n                                    invalid: errors.password2\r\n                                  })}\r\n                                />\r\n                            <label htmlFor=\"password2\">Confirm Password</label>\r\n                            <span className=\"red-text\">{errors.password2}</span>\r\n                        </div>\r\n                        <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                            <button\r\n                                style={{\r\n                                    width: \"150px\",\r\n                                    borderRadius: \"3px\",\r\n                                    letterSpacing: \"1.5px\",\r\n                                    marginTop: \"1rem\"\r\n                                }}\r\n                                type=\"submit\"\r\n                                className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                                >\r\n                                Sign up\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nRegister.propTypes = {\r\n    registerUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { registerUser }\r\n)(withRouter(Register));","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\private-route\\PrivateRoute.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\dashboard\\Dashboard.js",["100","101","102"],"//react\r\nimport { useState, useEffect, useContext, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//other libs\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nimport axios from 'axios';\r\n\r\n//context\r\nimport MainContext from \"../../context/MainContext\";\r\n\r\n//components\r\nimport Card from './Card';\r\nimport Navbar from '../layout/Navbar';\r\n\r\n\r\nfunction Dashboard(props) {\r\n    const [gameTotal, setGameTotal] = useState(0);\r\n    const [games, setGames] = useState([]);\r\n    const [modalResults, setModalResults] = useState({});\r\n    const { toggleNewGameAdded, toggleGameInDb } = useContext(MainContext);\r\n    const [page, setPage] = useState(1);\r\n    const [scrollIndex, setScrollIndex] = useState(8);\r\n    const loader = useRef(null);\r\n    const [sorted, setSorted] = useState(\"default\");\r\n    const [maxScroll, setMaxScroll] = useState(false);\r\n\r\n    const { user } = props.auth;\r\n    const userData = {userId: user.id};\r\n\r\n    const onLogoutClick = e => {\r\n        e.preventDefault();\r\n        props.logoutUser();\r\n    };\r\n\r\n    //handles game search modal submit events\r\n    const onModalSubmit = (event) => {\r\n        event.preventDefault(event);\r\n\r\n        //getting array of checkbox gameChoices from search results\r\n        const gameChoices = Array.from(document.querySelectorAll('input[type=checkbox]:checked'))\r\n        .map(item => item.value);\r\n\r\n        const gameChoicesMap = {};\r\n\r\n        //splitting title and platform title=game[0] platform=game[1]\r\n        for(let i in gameChoices){\r\n            let game = gameChoices[i].split(\">\");\r\n            gameChoicesMap[game[0]] = game[1];\r\n        }\r\n\r\n        if(gameChoices.length === 0){\r\n            //searching for game\r\n            axios\r\n            .post('http://localhost:5000/api/games/searchGames', {searchTerm: event.target.title.value})\r\n            .then(res => {\r\n                setModalResults({\r\n                    newResults: true,\r\n                    results: res.data.games\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n        else{\r\n            let results = modalResults.results;\r\n            let games = [];\r\n\r\n            //getting all of the users choices\r\n            for(let i in results){\r\n                if(gameChoicesMap[results[i]._id]){\r\n                    games.push(results[i]);\r\n                }\r\n            }\r\n\r\n            let data = {userId: user.id, games: games};\r\n\r\n            //clearing results\r\n            setModalResults({\r\n                newResults: false,\r\n                results: []\r\n            });\r\n\r\n            axios\r\n            .post('http://localhost:5000/api/games/add', data)\r\n            .then(res => {\r\n                console.log(games);\r\n                data = {userId: user.id, sortType: sorted, numGames: scrollIndex}\r\n                console.log(data);\r\n                //if game is not already in users collection. Add it to their collection\r\n                if(res.data.success){\r\n                    toggleNewGameAdded(true);\r\n                    getGames(data).then(res => {\r\n                        setTimeout(() => {\r\n                            toggleNewGameAdded(false);\r\n                        }, 5000);\r\n                    }).catch(err => console.log(err));\r\n                }\r\n                else{\r\n                    toggleGameInDb(true);\r\n                    setTimeout(() => {\r\n                        toggleGameInDb(false);\r\n                    }, 5000);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n    };\r\n\r\n    //handles game reference deletion event\r\n    const onDeleteClick = (cardProps) => {\r\n        axios\r\n        .post(\"http://localhost:5000/api/games/delete\", {userId: user.id, gameId: cardProps.id})\r\n        .then(res => {\r\n            getGames({userId: user.id, numGames: scrollIndex - 1, sortType: sorted}).then(res => {}).catch(err => {console.log(err)});\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    //gets all games for the current user\r\n    const getGames = async (userData) => {\r\n        let res;\r\n        if(sorted === \"default\"){\r\n            res = await axios.post('http://localhost:5000/api/games/getGames', userData)\r\n            setMaxScroll(res.data.maxScroll);\r\n        }\r\n        else{\r\n            res = await axios.post(\"http://localhost:5000/api/games/sortGames\", userData);\r\n            setMaxScroll(res.data.maxScroll);\r\n        }\r\n        \r\n        setGameTotal(res.data.gameTotal);\r\n        setGames(res.data.games);\r\n    };\r\n\r\n    //runs once when the component mounts\r\n    useEffect(() => {\r\n        getGames({userId: user.id, numGames: scrollIndex, sortType: sorted});\r\n    }, []);\r\n\r\n    //sets up intersection observer for infinite scroll\r\n    useEffect(() => {\r\n        var options = {\r\n           root: null,\r\n           rootMargin: \"20px\",\r\n           threshold: 1.0\r\n        };\r\n       // initialize IntersectionObserver\r\n       // and attaching to Load More div\r\n        const observer = new IntersectionObserver(handleObserver, options);\r\n        if (loader.current) {\r\n           observer.observe(loader.current)\r\n        }\r\n   }, []);\r\n\r\n    //Creating games list using Card component\r\n    const GameItems = games.map((game) => {\r\n        return(<Card key={game._id} id={game._id} title={game.title} image={game.image} releaseDate={game.releaseDate} developers={game.developers} platform={game.platform} onDelete={onDeleteClick} />);\r\n    });\r\n\r\n    //manages infinite scroll\r\n    useEffect(() => {\r\n        if(!maxScroll){\r\n            setScrollIndex((scrollIndex) => scrollIndex + 8);\r\n            getGames({userId: user.id, numGames: scrollIndex, sortType: sorted});\r\n        }\r\n    }, [page]);\r\n\r\n    // here we handle what happens when user scrolls to Load More div\r\n   // in this case we just update page variable\r\n    const handleObserver = (entities) => {\r\n        const target = entities[0];\r\n\r\n        if (target.isIntersecting) {\r\n            setPage((page) => page + 1);\r\n        }\r\n    }\r\n\r\n    const onSortClick = async (event) => {\r\n        var sortType = event.currentTarget.id;\r\n        setScrollIndex(16);\r\n\r\n        let { data } = await axios.post(\"http://localhost:5000/api/games/sortGames\", {userId: user.id, sortType: sortType, numGames: 8});\r\n        \r\n        if(data.success){\r\n            setSorted(sortType);\r\n            setGames(data.games);\r\n            setMaxScroll(data.maxScroll);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12\">\r\n                    <Navbar modalResults={modalResults} onModalSubmit={onModalSubmit} logoutClick={onLogoutClick} onSortClick={onSortClick} />\r\n                </div>\r\n                <div className=\"col s12 center-align\">\r\n                    <h3>Welcome back, {user.name}</h3>\r\n                    <h5>Your current game total is: {gameTotal}</h5>\r\n                </div>\r\n                {GameItems}\r\n            </div>\r\n            <div className=\"col s12 center-align\" ref={loader}>\r\n                {games.length !== gameTotal ? <h4>Loading...</h4> : <></>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nDashboard.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser }\r\n)(Dashboard);\r\n","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\actions\\types.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\dashboard\\Card.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\layout\\Navbar.js",["103","104","105"],"import React from 'react';\r\nimport AddModal from '../add-modal/AddModal';\r\nimport SortMenu from '../sort_filter/SortMenu';\r\n\r\nfunction Navbar(props) {\r\n    /* ADD ME BACK LATER\r\n    const searchSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        console.log(e.target.search.value);\r\n    }\r\n        <li>\r\n            <form onSubmit={searchSubmit}>\r\n                <div className=\"input-field\">\r\n                <input id=\"search\" type=\"search\" required></input>\r\n                <label className=\"label-icon\" htmlFor=\"search\"><i className=\"material-icons\">search</i></label>\r\n                <i className=\"material-icons\">close</i>\r\n                </div>\r\n            </form>\r\n        </li>\r\n        <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\r\n    */\r\n\r\n    return( \r\n        <nav>\r\n            <div className=\"nav-wrapper red lighten-1\">\r\n                <a href=\"#\" className=\"brand-logo hide-on-small-only\">\r\n                    GameChest\r\n                    <i className=\"material-icons\">videogame_asset</i>\r\n                </a>\r\n                <a href=\"#\" className=\"hide-on-med-and-up\">GameChest</a>\r\n                <ul id=\"nav-mobile\" className=\"right\">\r\n                    <li>\r\n                        <AddModal modalResults={props.modalResults} onSubmit={props.onModalSubmit} closeModal={props.closeModal} />\r\n                    </li>\r\n                    <li>\r\n                        <SortMenu onSortClick={props.onSortClick}></SortMenu>\r\n                    </li>\r\n                    <li><a href=\"#\" onClick={props.logoutClick}><i className=\"material-icons\">exit_to_app</i></a></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\reducers\\index.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\add-modal\\AddModal.js",["106"],"import React, { useEffect, useContext } from 'react';\r\nimport M from 'materialize-css';\r\nimport Form from './Form';\r\nimport MainContext from '../../context/MainContext';\r\n\r\nfunction AddModal(props){\r\n  const { newGameAdded, gameInDb } = useContext(MainContext)\r\n\r\n  useEffect(() => {\r\n      let modal = document.querySelectorAll('.modal');\r\n      let instance = M.Modal.init(modal);\r\n  }, []);\r\n\r\n  return(\r\n    <>\r\n      <a href=\"#addModal\" className=\"sidenav-close modal-trigger\">Add game</a>\r\n      <div id=\"addModal\" className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <Form onSubmit={props.onSubmit} modalResults={props.modalResults} />\r\n          {newGameAdded ? <p className=\"green-text\">Game(s) has been added!</p> : <></>}\r\n          {gameInDb ? <p className=\"red-text\">Game not added. Game is already in your collection</p> : <></>}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddModal;","D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\reducers\\authReducer.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\reducers\\errorReducer.js",[],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\add-modal\\Form.js",[],["107","108"],"D:\\Programming\\Web Dev\\gamechest-mern-app\\client\\src\\components\\sort_filter\\SortMenu.js",["109","110","111","112","113"],"import { useEffect } from 'react';\r\nimport M from 'materialize-css';\r\n\r\nfunction SortMenu(props) {\r\n  useEffect(() => {\r\n    var elems = document.querySelectorAll('.dropdown-trigger');\r\n    var instances = M.Dropdown.init(elems);\r\n  }, []);\r\n\r\n  const handleClick = (e) => {\r\n    props.onSortClick(e);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <a className='dropdown-trigger' href='#' data-target='sort-dropdown'>Sort by...</a>\r\n      <ul id=\"sort-dropdown\" className='dropdown-content'>\r\n        <li></li>\r\n        <li><a id=\"sort_title\" href=\"#\" onClick={handleClick} style={{flexWrap: \"wrap\"}}>Title (alpha)</a></li>\r\n        <li><a id=\"sort_date_asc\" href=\"#\" onClick={handleClick}>Release date (oldest-newest)</a></li>\r\n        <li><a id=\"sort_date_desc\" href=\"#\" onClick={handleClick}>Release date (newest-oldest)</a></li>\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SortMenu;",{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":24,"column":8,"nodeType":"120","endLine":24,"endColumn":50,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":30,"column":8,"nodeType":"120","endLine":30,"endColumn":36,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"124","line":21,"column":8,"nodeType":"120","endLine":21,"endColumn":22,"suggestions":"125"},{"ruleId":"118","severity":1,"message":"122","line":27,"column":8,"nodeType":"120","endLine":27,"endColumn":36,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":30,"column":11,"nodeType":"129","messageId":"130","endLine":30,"endColumn":19},{"ruleId":"118","severity":1,"message":"131","line":145,"column":8,"nodeType":"120","endLine":145,"endColumn":10,"suggestions":"132"},{"ruleId":"118","severity":1,"message":"133","line":173,"column":8,"nodeType":"120","endLine":173,"endColumn":14,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":27,"column":17,"nodeType":"137","endLine":27,"endColumn":71},{"ruleId":"135","severity":1,"message":"136","line":31,"column":17,"nodeType":"137","endLine":31,"endColumn":60},{"ruleId":"135","severity":1,"message":"136","line":39,"column":25,"nodeType":"137","endLine":39,"endColumn":65},{"ruleId":"127","severity":1,"message":"138","line":11,"column":11,"nodeType":"129","messageId":"130","endLine":11,"endColumn":19},{"ruleId":"114","replacedBy":"139"},{"ruleId":"116","replacedBy":"140"},{"ruleId":"127","severity":1,"message":"141","line":7,"column":9,"nodeType":"129","messageId":"130","endLine":7,"endColumn":18},{"ruleId":"135","severity":1,"message":"136","line":16,"column":7,"nodeType":"137","endLine":16,"endColumn":76},{"ruleId":"135","severity":1,"message":"136","line":19,"column":13,"nodeType":"137","endLine":19,"endColumn":90},{"ruleId":"135","severity":1,"message":"136","line":20,"column":13,"nodeType":"137","endLine":20,"endColumn":66},{"ruleId":"135","severity":1,"message":"136","line":21,"column":13,"nodeType":"137","endLine":21,"endColumn":67},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.history' and 'user'. Either include them or remove the dependency array. You can also do a functional update 'setUser(u => ...)' if you only need 'user' in the 'setUser' call.","ArrayExpression",["144"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["145"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array. You can also do a functional update 'setUser(u => ...)' if you only need 'user' in the 'setUser' call.",["146"],["147"],"no-unused-vars","'userData' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getGames', 'scrollIndex', 'sorted', and 'user.id'. Either include them or remove the dependency array.",["148"],"React Hook useEffect has missing dependencies: 'getGames', 'maxScroll', 'scrollIndex', 'sorted', and 'user.id'. Either include them or remove the dependency array.",["149"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'instance' is assigned a value but never used.",["142"],["143"],"'instances' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"152","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [props.auth.isAuthenticated, props.errors, props.history, user]",{"range":"161","text":"162"},"Update the dependencies array to be: [props.auth.isAuthenticated, props.history]",{"range":"163","text":"164"},"Update the dependencies array to be: [props.errors, user]",{"range":"165","text":"166"},{"range":"167","text":"164"},"Update the dependencies array to be: [getGames, scrollIndex, sorted, user.id]",{"range":"168","text":"169"},"Update the dependencies array to be: [getGames, maxScroll, page, scrollIndex, sorted, user.id]",{"range":"170","text":"171"},[681,723],"[props.auth.isAuthenticated, props.errors, props.history, user]",[860,888],"[props.auth.isAuthenticated, props.history]",[593,607],"[props.errors, user]",[744,772],[4855,4857],"[getGames, scrollIndex, sorted, user.id]",[5877,5883],"[getGames, maxScroll, page, scrollIndex, sorted, user.id]"]